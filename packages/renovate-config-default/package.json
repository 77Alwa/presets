{
  "name": "renovate-config-default",
  "description": "Default preset configs for Renovate",
  "author": "Rhys Arkins <rhys@arkins.net>",
  "license": "MIT",
  "homepage": "https://github.com/singapore/renovate-config",
  "repository": {
    "type": "git",
    "url": "git+https://rarkins@github.com/singapore/renovate-config.git"
  },
  "bugs": {
    "url": "https://github.com/singapore/renovate-config/issues"
  },
  "version": "0.0.14",
  "renovate-config": {
    "enableRenovate": {
      "description": "Enable renovate",
      "enabled": true
    },
    "disableRenovate": {
      "description": "Disable renovate",
      "enabled": false
    },
    "includeNodeModules": {
      "description": "Include <code>package.json</code> files found within <code>node_modules</code> folders",
      "ignoreNodeModules": false
    },
    "pinVersions": {
      "description": "Use version pinning (maintain a single version only and not semver ranges)",
      "pinVersions": true
    },
    "preserveSemverRanges": {
      "description": "Preserve (but continue to upgrade) any existing semver ranges",
      "pinVersions": false
    },
    "pinOnlyDevDependencies": {
      "description": "Pin dependency versions for <code>devDependencies</code> and retain semver ranges for others",
      "dependencies": {
        "extends": ":preserveSemverRanges"
      },
      "devDependencies": {
        "extends": ":pinVersions"
      },
      "optionalDependencies": {
        "extends": ":preserveSemverRanges"
      },
      "peerDependencies": {
        "extends": ":preserveSemverRanges"
      }
    },
    ":autodetectPinVersions" : {
      "description": "Autodetect whether to pin dependencies or maintain ranges",
      "pinVersions": null
    },
    "separateMajorReleases": {
      "description": "Separate major versions of dependencies into individual branches/PRs",
      "separateMajorReleases": true
    },
    "separatePatchReleases": {
      "description": "Separate patch and minor releases of dependencies into separate PRs",
      "separatePatchReleases": true
    },
    "combinePatchMinorReleases": {
      "description": "Combine any patch and minor upgrades together into same branch/PR",
      "separatePatchReleases": false
    },
    "renovatePrefix": {
      "description": "Use <code>renovate/</code> as prefix for all branch names",
      "branchprefix": "renovate/"
    },
    "semanticPrefixChore": {
      "description": "Use <code>chore(deps):</code> as semantic prefix for commit messages and PR titles",
      "semanticPrefix": "chore(deps):"
    },
    "semanticPrefixFix": {
      "description": "Use <code>fix(deps):</code> as semantic prefix for commit messages and PR titles",
      "semanticPrefix": "fix(deps):"
    },
    "disablePeerDependencies": {
      "description": "Do not renovate <code>peerDependencies</code> versions/ranges",
      "peerDependencies": {
        "enabled": false
      }
    },
    "semanticPrefixFixDepsChoreOthers": {
      "description": "If semantic commits detected, use <code>fix(deps):</code> for dependencies and <code>chore(deps):</code> for all others",
      "dependencies": {
        "extends": ":semanticPrefixFix"
      },
      "devDependencies": {
        "extends": ":semanticPrefixChore"
      },
      "optionalDependencies": {
        "extends": ":semanticPrefixChore"
      },
      "peerDependencies": {
        "extends": ":semanticPrefixChore"
      }
    },
    "unpublishSafe": {
      "description": "Set a status check to warn when upgrades <  24 hours old might get unpublished",
      "unpublishSafe": true
    },
    "unpublishSafeDisabled": {
      "description": "Create branches/PRs for dependency upgrades as soon as they're available",
      "unpublishSafe": false
    },
    "prImmediately": {
      "description": "Raise PRs immediately (after branch is created)",
      "prCreation": "immediate"
    },
    "prNotPending": {
      "description": "Wait until branch tests have passed or failed before creating the PR",
      "prCreation": "not-pending"
    },
    "automergeDisabled": {
      "description": "Disable automerging feature - wait for humans to merge all PRs",
      "automerge": false
    },
    "automergePatch": {
      "description": "Automerge patch upgrades if they pass tests",
      "patch": {
        "automerge": true
      }
    },
    "automergeMinor": {
      "description": "Automerge patch or minor upgrades if they pass tests",
      "minor": {
        "automerge": true
      }
    },
    "automergeMajor": {
      "description": "Automerge all upgrades (inluding major) if they pass tests",
      "automerge": true
    },
    "automergeBranchMergeCommit": {
      "description": "If automerging, perform a merge-commit on branch (no PR)",
      "automergeType": "branch-merge-commit"
    },
    "automergeBranchPush": {
      "description": "If automerging, push the new commit directly to base branch (no PR)",
      "automergeType": "branch-push"
    },
    "automergePr": {
      "description": "Raise a PR first before any automerging",
      "automergeType": "pr"
    },
    "automergeRequireAllStatusChecks": {
      "description": "Require all status checks to pass before any automerging",
      "requiredStatusChecks": []
    },
    "maintainLockFilesDisabled": {
      "description": "Update existing lock files only when <code>package.json</code> is modified",
      "lockFileMaintenance": {
        "enabled": false
      }
    },
    "maintainLockFilesWeekly": {
      "description": "Run lock file maintenance (updates) early Monday mornings",
      "lockFileMaintenance": {
        "enabled": true,
        "extends": "schedule:weekly"
      }
    },
    "maintainLockFilesMonthly": {
      "description": "Run lock file maintenance (updates) on the first day of each month",
      "lockFileMaintenance": {
        "enabled": true,
        "extends": "schedule:monthly"
      }
    },
    "ignoreUnstable": {
      "description": "Upgrade to unstable versions only if the existing version is unstable",
      "ignoreUnstable": true
    },
    "respectLatest": {
      "description": "Upgrade versions up to the \"latest\" tag in npm registry",
      "respectLatest": true
    },
    "updateNotScheduled": {
      "description": "Keep existing branches updated even when not scheduled",
      "updateNotScheduled": true
    },
    "noUnscheduledUpdates": {
      "description": "Make no updates to branches when not scheduled",
      "updateNotScheduled": false
    },
    "automergeLinters": {
      "description": "Update lint packages automatically if tests pass",
      "packageRules": [
        {
          "extends": [
            "packages:linters"
          ],
          "automerge": true
        }
      ]
    },
    "doNotPinPackage": {
      "description": "Disable version pinning for <code>{{arg0}}</code>",
      "packageRules": [
        {
          "packageNames": [
            "{{arg0}}"
          ],
          "pinVersions": false
        }
      ]
    },
    "npm": {
      "description": "Keep package.json npm dependencies updated",
      "javascript": {
        "enabled": true
      }
    },
    "docker": {
      "description": "Keep Dockerfile FROM sources updated",
      "docker": {
        "enabled": true
      }
    },
    "meteor": {
      "description": "Keep Meteor Npm.depends packages updated",
      "meteor": {
        "enabled": true
      }
    },
    "group": {
      "description": "Group {{arg1}} packages into same branch/PR",
      "packageRules": [
        {
          "extends": [
            "{{arg0}}"
          ],
          "groupName": "{{arg1}}"
        }
      ]
    },
    "base": {
      "description": "deprecated alias for config:base",
      "extends": ["config:base"]
    },
    "app": {
      "description": "deprecated alias for config:js-app",
      "extends": ["config:js-app"]
    },
    "library": {
      "description": "deprecated alias for config:js-lib",
      "extends": ["config:js-lib"]
    }
  }
}
